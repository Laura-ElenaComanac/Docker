{"ast":null,"code":"export var baseUrl='localhost:3000';export var getLogger=function getLogger(tag){return function(){var _console;for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return(_console=console).log.apply(_console,[tag].concat(args));};};var log=getLogger('api');export function withLogs(promise,fnName){log(\"\".concat(fnName,\" - started\"));return promise.then(function(res){log(\"\".concat(fnName,\" - succeeded\"));return Promise.resolve(res.data);}).catch(function(err){log(\"\".concat(fnName,\" - failed\"));return Promise.reject(err);});}export var config={headers:{'Content-Type':'application/json'}};export var authConfig=function authConfig(token){return{headers:{'Content-Type':'application/json',Authorization:\"Bearer \".concat(token)}};};","map":{"version":3,"sources":["/Users/laura-elena.olaru/Downloads/FinalDocker/my-ionic-app/src/core/index.tsx"],"names":["baseUrl","getLogger","tag","args","console","log","withLogs","promise","fnName","then","res","Promise","resolve","data","catch","err","reject","config","headers","authConfig","token","Authorization"],"mappings":"AAAA,MAAO,IAAMA,CAAAA,OAAO,CAAG,gBAAhB,CAEP,MAAO,IAAMC,CAAAA,SAAkD,CAC3D,QADSA,CAAAA,SACT,CAAAC,GAAG,QAAI,uDAAIC,IAAJ,0CAAIA,IAAJ,8BAAa,UAAAC,OAAO,EAACC,GAAR,iBAAYH,GAAZ,SAAoBC,IAApB,EAAb,EAAJ,EADA,CAGP,GAAME,CAAAA,GAAG,CAAGJ,SAAS,CAAC,KAAD,CAArB,CAMA,MAAO,SAASK,CAAAA,QAAT,CAAqBC,OAArB,CAAyDC,MAAzD,CAAqF,CAC1FH,GAAG,WAAIG,MAAJ,eAAH,CACA,MAAOD,CAAAA,OAAO,CACXE,IADI,CACC,SAAAC,GAAG,CAAI,CACXL,GAAG,WAAIG,MAAJ,iBAAH,CACA,MAAOG,CAAAA,OAAO,CAACC,OAAR,CAAgBF,GAAG,CAACG,IAApB,CAAP,CACD,CAJI,EAKJC,KALI,CAKE,SAAAC,GAAG,CAAI,CACZV,GAAG,WAAIG,MAAJ,cAAH,CACA,MAAOG,CAAAA,OAAO,CAACK,MAAR,CAAeD,GAAf,CAAP,CACD,CARI,CAAP,CASD,CAED,MAAO,IAAME,CAAAA,MAAM,CAAG,CACpBC,OAAO,CAAE,CACP,eAAgB,kBADT,CADW,CAAf,CAMP,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,KAAD,QAAqB,CAC7CF,OAAO,CAAE,CACP,eAAgB,kBADT,CAEPG,aAAa,kBAAYD,KAAZ,CAFN,CADoC,CAArB,EAAnB","sourcesContent":["export const baseUrl = 'localhost:3000';\n\nexport const getLogger: (tag: string) => (...args: any) => void =\n    tag => (...args) => console.log(tag, ...args);\n\nconst log = getLogger('api');\n\nexport interface ResponseProps<T> {\n  data: T;\n}\n\nexport function withLogs<T>(promise: Promise<ResponseProps<T>>, fnName: string): Promise<T> {\n  log(`${fnName} - started`);\n  return promise\n    .then(res => {\n      log(`${fnName} - succeeded`);\n      return Promise.resolve(res.data);\n    })\n    .catch(err => {\n      log(`${fnName} - failed`);\n      return Promise.reject(err);\n    });\n}\n\nexport const config = {\n  headers: {\n    'Content-Type': 'application/json'\n  }\n};\n\nexport const authConfig = (token?: string) => ({\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${token}`,\n  }\n});\n"]},"metadata":{},"sourceType":"module"}