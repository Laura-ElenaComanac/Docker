{"ast":null,"code":"import axios from 'axios';\nimport { authConfig, baseUrl, getLogger, withLogs } from '../core';\nconst itemUrl = `http://${baseUrl}/api/item`;\nexport const getItems = token => {\n  return withLogs(axios.get(itemUrl, authConfig(token)), 'getItems');\n};\nexport const createItem = (token, item) => {\n  return withLogs(axios.post(itemUrl, item, authConfig(token)), 'createItem');\n};\nexport const updateItem = (token, item) => {\n  return withLogs(axios.put(`${itemUrl}/${item._id}`, item, authConfig(token)), 'updateItem');\n};\nconst log = getLogger('ws');\nexport const newWebSocket = (token, onMessage) => {\n  const ws = new WebSocket(`ws://${baseUrl}`);\n\n  ws.onopen = () => {\n    log('web socket onopen');\n    ws.send(JSON.stringify({\n      type: 'authorization',\n      payload: {\n        token\n      }\n    }));\n  };\n\n  ws.onclose = () => {\n    log('web socket onclose');\n  };\n\n  ws.onerror = error => {\n    log('web socket onerror', error);\n  };\n\n  ws.onmessage = messageEvent => {\n    log('web socket onmessage');\n    onMessage(JSON.parse(messageEvent.data));\n  };\n\n  return () => {\n    ws.close();\n  };\n};","map":{"version":3,"sources":["/Users/laura-elena.olaru/Downloads/Microservices/my-ionic-app/src/todo/itemApi.tsx"],"names":["axios","authConfig","baseUrl","getLogger","withLogs","itemUrl","getItems","token","get","createItem","item","post","updateItem","put","_id","log","newWebSocket","onMessage","ws","WebSocket","onopen","send","JSON","stringify","type","payload","onclose","onerror","error","onmessage","messageEvent","parse","data","close"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,OAArB,EAA8BC,SAA9B,EAAyCC,QAAzC,QAAyD,SAAzD;AAGA,MAAMC,OAAO,GAAI,UAASH,OAAQ,WAAlC;AAEA,OAAO,MAAMI,QAAiD,GAAGC,KAAK,IAAI;AACxE,SAAOH,QAAQ,CAACJ,KAAK,CAACQ,GAAN,CAAUH,OAAV,EAAmBJ,UAAU,CAACM,KAAD,CAA7B,CAAD,EAAwC,UAAxC,CAAf;AACD,CAFM;AAIP,OAAO,MAAME,UAAoE,GAAG,CAACF,KAAD,EAAQG,IAAR,KAAiB;AACnG,SAAON,QAAQ,CAACJ,KAAK,CAACW,IAAN,CAAWN,OAAX,EAAoBK,IAApB,EAA0BT,UAAU,CAACM,KAAD,CAApC,CAAD,EAA+C,YAA/C,CAAf;AACD,CAFM;AAIP,OAAO,MAAMK,UAAoE,GAAG,CAACL,KAAD,EAAQG,IAAR,KAAiB;AACnG,SAAON,QAAQ,CAACJ,KAAK,CAACa,GAAN,CAAW,GAAER,OAAQ,IAAGK,IAAI,CAACI,GAAI,EAAjC,EAAoCJ,IAApC,EAA0CT,UAAU,CAACM,KAAD,CAApD,CAAD,EAA+D,YAA/D,CAAf;AACD,CAFM;AASP,MAAMQ,GAAG,GAAGZ,SAAS,CAAC,IAAD,CAArB;AAEA,OAAO,MAAMa,YAAY,GAAG,CAACT,KAAD,EAAgBU,SAAhB,KAA2D;AACrF,QAAMC,EAAE,GAAG,IAAIC,SAAJ,CAAe,QAAOjB,OAAQ,EAA9B,CAAX;;AACAgB,EAAAA,EAAE,CAACE,MAAH,GAAY,MAAM;AAChBL,IAAAA,GAAG,CAAC,mBAAD,CAAH;AACAG,IAAAA,EAAE,CAACG,IAAH,CAAQC,IAAI,CAACC,SAAL,CAAe;AAAEC,MAAAA,IAAI,EAAE,eAAR;AAAyBC,MAAAA,OAAO,EAAE;AAAElB,QAAAA;AAAF;AAAlC,KAAf,CAAR;AACD,GAHD;;AAIAW,EAAAA,EAAE,CAACQ,OAAH,GAAa,MAAM;AACjBX,IAAAA,GAAG,CAAC,oBAAD,CAAH;AACD,GAFD;;AAGAG,EAAAA,EAAE,CAACS,OAAH,GAAaC,KAAK,IAAI;AACpBb,IAAAA,GAAG,CAAC,oBAAD,EAAuBa,KAAvB,CAAH;AACD,GAFD;;AAGAV,EAAAA,EAAE,CAACW,SAAH,GAAeC,YAAY,IAAI;AAC7Bf,IAAAA,GAAG,CAAC,sBAAD,CAAH;AACAE,IAAAA,SAAS,CAACK,IAAI,CAACS,KAAL,CAAWD,YAAY,CAACE,IAAxB,CAAD,CAAT;AACD,GAHD;;AAIA,SAAO,MAAM;AACXd,IAAAA,EAAE,CAACe,KAAH;AACD,GAFD;AAGD,CAnBM","sourcesContent":["import axios from 'axios';\nimport { authConfig, baseUrl, getLogger, withLogs } from '../core';\nimport { ItemProps } from './ItemProps';\n\nconst itemUrl = `http://${baseUrl}/api/item`;\n\nexport const getItems: (token: string) => Promise<ItemProps[]> = token => {\n  return withLogs(axios.get(itemUrl, authConfig(token)), 'getItems');\n}\n\nexport const createItem: (token: string, item: ItemProps) => Promise<ItemProps[]> = (token, item) => {\n  return withLogs(axios.post(itemUrl, item, authConfig(token)), 'createItem');\n}\n\nexport const updateItem: (token: string, item: ItemProps) => Promise<ItemProps[]> = (token, item) => {\n  return withLogs(axios.put(`${itemUrl}/${item._id}`, item, authConfig(token)), 'updateItem');\n}\n\ninterface MessageData {\n  type: string;\n  payload: ItemProps;\n}\n\nconst log = getLogger('ws');\n\nexport const newWebSocket = (token: string, onMessage: (data: MessageData) => void) => {\n  const ws = new WebSocket(`ws://${baseUrl}`);\n  ws.onopen = () => {\n    log('web socket onopen');\n    ws.send(JSON.stringify({ type: 'authorization', payload: { token } }));\n  };\n  ws.onclose = () => {\n    log('web socket onclose');\n  };\n  ws.onerror = error => {\n    log('web socket onerror', error);\n  };\n  ws.onmessage = messageEvent => {\n    log('web socket onmessage');\n    onMessage(JSON.parse(messageEvent.data));\n  };\n  return () => {\n    ws.close();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}