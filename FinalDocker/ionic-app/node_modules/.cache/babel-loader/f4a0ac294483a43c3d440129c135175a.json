{"ast":null,"code":"export const baseUrl = 'localhost:4000';\nexport const baseToDoUrl = 'localhost:5000';\nexport const getLogger = tag => (...args) => console.log(tag, ...args);\nconst log = getLogger('api');\nexport function withLogs(promise, fnName) {\n  log(`${fnName} - started`);\n  return promise.then(res => {\n    log(`${fnName} - succeeded`);\n    return Promise.resolve(res.data);\n  }).catch(err => {\n    log(`${fnName} - failed`);\n    return Promise.reject(err);\n  });\n}\nexport const config = {\n  headers: {\n    'Content-Type': 'application/json'\n  }\n};\nexport const authConfig = token => ({\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${token}`\n  }\n});","map":{"version":3,"sources":["/Users/laura-elena.olaru/Downloads/FinalDocker/ionic-app/src/core/index.tsx"],"names":["baseUrl","baseToDoUrl","getLogger","tag","args","console","log","withLogs","promise","fnName","then","res","Promise","resolve","data","catch","err","reject","config","headers","authConfig","token","Authorization"],"mappings":"AAAA,OAAO,MAAMA,OAAO,GAAG,gBAAhB;AACP,OAAO,MAAMC,WAAW,GAAG,gBAApB;AAEP,OAAO,MAAMC,SAAkD,GAC3DC,GAAG,IAAI,CAAC,GAAGC,IAAJ,KAAaC,OAAO,CAACC,GAAR,CAAYH,GAAZ,EAAiB,GAAGC,IAApB,CADjB;AAGP,MAAME,GAAG,GAAGJ,SAAS,CAAC,KAAD,CAArB;AAMA,OAAO,SAASK,QAAT,CAAqBC,OAArB,EAAyDC,MAAzD,EAAqF;AAC1FH,EAAAA,GAAG,CAAE,GAAEG,MAAO,YAAX,CAAH;AACA,SAAOD,OAAO,CACXE,IADI,CACCC,GAAG,IAAI;AACXL,IAAAA,GAAG,CAAE,GAAEG,MAAO,cAAX,CAAH;AACA,WAAOG,OAAO,CAACC,OAAR,CAAgBF,GAAG,CAACG,IAApB,CAAP;AACD,GAJI,EAKJC,KALI,CAKEC,GAAG,IAAI;AACZV,IAAAA,GAAG,CAAE,GAAEG,MAAO,WAAX,CAAH;AACA,WAAOG,OAAO,CAACK,MAAR,CAAeD,GAAf,CAAP;AACD,GARI,CAAP;AASD;AAED,OAAO,MAAME,MAAM,GAAG;AACpBC,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT;AADW,CAAf;AAMP,OAAO,MAAMC,UAAU,GAAIC,KAAD,KAAqB;AAC7CF,EAAAA,OAAO,EAAE;AACP,oBAAgB,kBADT;AAEPG,IAAAA,aAAa,EAAG,UAASD,KAAM;AAFxB;AADoC,CAArB,CAAnB","sourcesContent":["export const baseUrl = 'localhost:4000';\nexport const baseToDoUrl = 'localhost:5000';\n\nexport const getLogger: (tag: string) => (...args: any) => void =\n    tag => (...args) => console.log(tag, ...args);\n\nconst log = getLogger('api');\n\nexport interface ResponseProps<T> {\n  data: T;\n}\n\nexport function withLogs<T>(promise: Promise<ResponseProps<T>>, fnName: string): Promise<T> {\n  log(`${fnName} - started`);\n  return promise\n    .then(res => {\n      log(`${fnName} - succeeded`);\n      return Promise.resolve(res.data);\n    })\n    .catch(err => {\n      log(`${fnName} - failed`);\n      return Promise.reject(err);\n    });\n}\n\nexport const config = {\n  headers: {\n    'Content-Type': 'application/json'\n  }\n};\n\nexport const authConfig = (token?: string) => ({\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${token}`,\n  }\n});\n"]},"metadata":{},"sourceType":"module"}