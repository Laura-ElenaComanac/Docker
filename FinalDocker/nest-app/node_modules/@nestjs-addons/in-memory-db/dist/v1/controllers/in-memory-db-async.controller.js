"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InMemoryDBV1EntityAsyncController = void 0;
const common_1 = require("@nestjs/common");
const rxjs_1 = require("rxjs");
class InMemoryDBV1EntityAsyncController {
    constructor(dbService) {
        this.dbService = dbService;
    }
    create(record) {
        if (Array.isArray(record)) {
            return this.dbService.createManyAsync(record);
        }
        return this.dbService.createAsync(record);
    }
    update(id, record) {
        return this.dbService.updateAsync(Object.assign({ id }, record));
    }
    updateMany(records) {
        return this.dbService.updateManyAsync(records);
    }
    delete(id) {
        return this.dbService.deleteAsync(id);
    }
    deleteMany(ids) {
        return this.dbService.deleteManyAsync(ids);
    }
    get(id) {
        return this.dbService.getAsync(id);
    }
    getMany(ids) {
        if (ids && Array.isArray(ids)) {
            return this.dbService.getManyAsync(ids);
        }
        return this.dbService.getAllAsync();
    }
}
__decorate([
    common_1.Post(),
    __param(0, common_1.Body()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", rxjs_1.Observable)
], InMemoryDBV1EntityAsyncController.prototype, "create", null);
__decorate([
    common_1.Put(':id'),
    __param(0, common_1.Param('id')),
    __param(1, common_1.Body()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", rxjs_1.Observable)
], InMemoryDBV1EntityAsyncController.prototype, "update", null);
__decorate([
    common_1.Put(),
    __param(0, common_1.Body()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Array]),
    __metadata("design:returntype", rxjs_1.Observable)
], InMemoryDBV1EntityAsyncController.prototype, "updateMany", null);
__decorate([
    common_1.Delete(':id'),
    __param(0, common_1.Param('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", rxjs_1.Observable)
], InMemoryDBV1EntityAsyncController.prototype, "delete", null);
__decorate([
    common_1.Delete(),
    __param(0, common_1.Body()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Array]),
    __metadata("design:returntype", rxjs_1.Observable)
], InMemoryDBV1EntityAsyncController.prototype, "deleteMany", null);
__decorate([
    common_1.Get(':id'),
    __param(0, common_1.Param('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", rxjs_1.Observable)
], InMemoryDBV1EntityAsyncController.prototype, "get", null);
__decorate([
    common_1.Get(),
    __param(0, common_1.Body()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Array]),
    __metadata("design:returntype", rxjs_1.Observable)
], InMemoryDBV1EntityAsyncController.prototype, "getMany", null);
exports.InMemoryDBV1EntityAsyncController = InMemoryDBV1EntityAsyncController;
