"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InMemoryDBV1Service = void 0;
const common_1 = require("@nestjs/common");
const rxjs_1 = require("rxjs");
let InMemoryDBV1Service = class InMemoryDBV1Service {
    constructor(config) {
        this.config = config;
        this.recordMap = {};
    }
    set records(records) {
        if (!records || records.length === 0) {
            this.recordMap = {};
        }
        this.recordMap = records.reduce((previous, current) => {
            return Object.assign(Object.assign({}, previous), { [current.id]: current });
        }, this.recordMap);
    }
    get records() {
        return Object.keys(this.recordMap).map((key) => this.recordMap[key]);
    }
    create(record) {
        const id = record.id || this.getNextId();
        const newRecord = Object.assign(Object.assign({}, record), { id });
        this.recordMap = Object.assign(Object.assign({}, this.recordMap), { [id]: newRecord });
        return newRecord;
    }
    createAsync(record) {
        const result$ = rxjs_1.of(this.create(record));
        return result$;
    }
    createMany(records) {
        return records.map((record) => this.create(record));
    }
    createManyAsync(records) {
        const result$ = rxjs_1.of(this.createMany(records));
        return result$;
    }
    update(record) {
        this.recordMap = Object.assign(Object.assign({}, this.recordMap), { [record.id]: Object.assign({}, record) });
    }
    updateAsync(record) {
        this.update(record);
        const result$ = rxjs_1.of();
        return result$;
    }
    updateMany(records) {
        for (const record of records) {
            this.update(record);
        }
    }
    updateManyAsync(records) {
        this.updateMany(records);
        const result$ = rxjs_1.of();
        return result$;
    }
    delete(id) {
        const _a = this.recordMap, _b = id, removed = _a[_b], remainder = __rest(_a, [typeof _b === "symbol" ? _b : _b + ""]);
        this.recordMap = Object.assign({}, remainder);
    }
    deleteAsync(id) {
        this.delete(id);
        const result$ = rxjs_1.of();
        return result$;
    }
    deleteMany(ids) {
        for (const id of ids) {
            this.delete(id);
        }
    }
    deleteManyAsync(ids) {
        this.deleteMany(ids);
        const result$ = rxjs_1.of();
        return result$;
    }
    get(id) {
        return this.recordMap[id];
    }
    getAsync(id) {
        const result$ = rxjs_1.of(this.get(id));
        return result$;
    }
    getMany(ids) {
        const records = ids
            .filter((id) => this.recordMap[id])
            .map((id) => {
            return this.recordMap[id];
        });
        return records;
    }
    getManyAsync(ids) {
        const result$ = rxjs_1.of(this.getMany(ids));
        return result$;
    }
    getAll() {
        return this.records || [];
    }
    getAllAsync() {
        const result$ = rxjs_1.of(this.getAll());
        return result$;
    }
    query(predicate) {
        return this.records.filter(predicate);
    }
    queryAsync(predicate) {
        const result$ = rxjs_1.of(this.query(predicate));
        return result$;
    }
    seed(recordFactory, amount = 10) {
        amount = amount === null ? 10 : amount;
        const recordsToCreate = [...Array(amount).keys()].map((i) => recordFactory(i));
        this.createMany(recordsToCreate);
    }
    getNextId() {
        if (this.records && this.records.length > 0) {
            return Math.max(...this.records.map((r) => r.id)) + 1;
        }
        return 1;
    }
};
InMemoryDBV1Service = __decorate([
    common_1.Injectable(),
    __param(0, common_1.Optional()),
    __metadata("design:paramtypes", [Object])
], InMemoryDBV1Service);
exports.InMemoryDBV1Service = InMemoryDBV1Service;
